                                  Python Learning Notes (offical website https://www.python.org)

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but
effective approach to objec-oriented programming.

Python's elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and 
rapid application development in many areas on most platform

1. Python's Interpreter
   Python Interpreter is usually installed as /usr/local/bin/python 
   in the system prompt, you can type the 'python' to execute the Interpreter
   Typing an end-of-file character(Control-D on Unix and Control-Z on Windows) if that doesn't work
   you can exit the interpreter by typing the following command quit().
   
   When known to the interpreter, the script name and additional arguments thereafter are turned into 
   a list of strings and assigned to the 'argv' variable in the sys module. Developer can access this list
   by executing 'import sys'. The length of the list is at least one; when no script and no arguments are given
   sys.argv[0] is an empty string. when the script name is given as '-'(meaning standard input), sys.argv[0] is
   set to '-'. when -c command is used, sys.argv[0] is set to '-c'.

2. Source Code Encoding
   It is possible to use encodings different than ASCII in Python source files. The best way to do it is to
   put one more special comment line right after the #! line to define the source file encoding:
   # -*- coding: encoding -*-
   
3. Introduction to Python
   3.1 Using Python as a Calculator
   Let's try some Python commands. Start the interpreter and wait for the primary prompt, >>>. 
   3.1.1 Numbers
   The interpreter acts as a simple calculator: you can type an expression at it and it will write the value.
   Expression syntax is straightforward. The operators +,-,* and / work just like in most other language.
   
   >>> 2 + 2
   4
   >>> 50 - 5*6
   20
   >>>(50 - 5.0*6)/4
   5.0
   >>> 8 / 5.0 
   1.6
   >>> 17 / 3.0 # int / float -> float 
   There is full support for floating point;operators with mixed type operands convert the integer operand to floating
   point:
   
   The integer numbers(4,20) have type int, the ones with a fractional part(e.g. 5.0,1.6) have type float.
   The return type of a division(/) operation depends on its operands. if both operands are of type int,
   floor division is performed and an int is returned. if either operand is float, classic division is performed 
   and a float is returned. 
   
   The // operator is also provided for doing floor division no matter what the operands are. for example
   >>> 17 // 3.0 # explicit floor division discards the fractional part.
   5.0
   The remainder can be calculated with the % operator.
   With Python, it is possible to use the ** operator to calculate powers
   >>> 5 ** 2 # 5 squared
   25
   >>> 2 ** 7 # 2 to the power of 7
   128
   The equal sign(=) is used to assign a value to a variable. afterwards, no result is displayed before the next 
   interactive prompt:
   >>> width = 20
   >>> height = 5 * 9
   >>> width * height
   900
   if a variable is not "defined" (assigned a value), trying to use it will give you an error:
   >>>n #try to access an undefined variable
   Traceback (most recent call last):
        File "<stdin>", Line 1, in <module>
   NameError : name 'n' is not defined
   
   3.1.2 Strings
   Besides numbers, Python can also manipulate strings, which can be expressed in serval ways. They can be enclosed in 
   single quotes('...') or double quotes("...") with the same result. \ can be used to escape quotes:
   >>> 'spam eggs' # single quotes
   'spam eggs'
   >>>'doesn\'t' # use \' to escape the single quote....
   "doesn't"
   >>>"doesn't" # ... or use double quotes instead
   "doesn't"
   >>>' "Yes," he said.' 
   ' "Yes," he said.'
   >>>"\"Yes,\" he said."
   ' "Yes," he said.'
   >>> '"Isn\'t," she said.'
   '"Isn\'t," she said.'
   while this might sometimes look different from the input(the enclosing quotes could change), the two strings are 
   equivalent. The string is enclosed in double quotes if the string contains a single quote and no double quotes.
   otherwise it is enclosed in single quotes. The print statement produces a more readable output, by omitting the
   enclosing quotes and by printing escape and special characters:
   >>> '"Isn\'t," she said.'
   '"Isn\'t," she said.'
   >>> print '"Isn\'t," she said.'
   "Isn't," she said.
   if you don't want characters prefaced by \ to be interpreted as special characters, you can use raw string by adding
   an r before the first quote:
   >>>print 'c:\some\name' # here \n means newline!
   c:\some
   ame
   >>>print r'c:\some\name' #note the r before the quote.
   c:\some\name
   
   Strings can be concatenated(glued together) with the + operator, and replaced with *
   >>># 3 times 'un', followed by 'ium'
   >>>3 * 'un' + 'ium'
   'unununium'
   Two or mor string literals(i.e the ones enclosed between quotes) next to each other are automatically concatenated.
   >>>'Py' 'thon'
   'Python'
   This only works with two literals though, not with variables or expressions:
   >>>prefix = 'Py'
   >>>prefix 'thon' #can't concatenate a variable and a string literal
   if you want to concatenate variables or a variable and a literal, use +
   >>> prefix + 'thon'
   'Python'
   String can be indexed (subscripted) with the first character having index 0.There is no separate character type; a
   character is simply a string of size one:
   >>> word = 'Python'
   >>> word[0] # Character in position 0
   'p'
   >>> word[5] # Character in position 5
   'n'
   Indices may also be negative numbers, to start counting from the right.
   >>> word[-1] #last character
   'n'
   >>> word[-2] #second-last character
   'o'
   >>> word[-6]
   'P'
   Note that since -0 is the same as 0, negative indices start from -1
   In addition to indexing, Slicing is also supported, While indexing is used to obtain individual characters,slicing allows
   you to obtain a substring:
   
   >>> word[0:2] # characters from position 0 (included) to 2(excluded)
   'Py'
   >>> word[2:5] # characters from position 2 (included) to 5 (excluded)
   'tho'
   Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:] is always equal 
   to s
   >>> word[:2] + word[2:]
   'Python'
   >>> word[:4] + word[4:]
   'Python'
   
   One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the
   first character numbered 0. then the right edge of the last character of a string of n characters has index n, for example:
   +---+---+---+---+---+---+
   | P | y | t | h | o | n |
   +---+---+---+---+---+---+
   0   1   2   3   4   5   6
  -6  -5  -4  -3  -2  -1
  The first row of numbers gives the position of the indices 0...6 in the string; the second row gives the corresponding
  negative indices. 
  Attempting to use a index that is too large will result in an error:
  >>> word[42] # the word only has 6 characters
  Traceback (most recent call last)
  IndexError: String index out of range.
  
  However, out of range slice indexes are handled gracefully when used for slicing:
  >>> word[4:42]
  'on'
  >>> word[42:]
  ''
  Python Strings cannot be changed -- they are immutable. Therefore, assigning to an indexed position in the string results
  in an error:
  
  >>> word[0]='J'
    ...
  TypeError : 'str' object does not support item assignment
  >>> word[2:] = 'Py'
  TypeError : 'str' object does not support item assignment.
  
  if you need a different string, you should create a new one. The built-in function len() returns the length of a string.
  >>> s = 'suppercalifragilisticexpialidocious'
  >>> len(s)
  34.
  
  3.1.4 Lists
  Python knows a number of compound data types, used to group together other values. The most versatile is the list, which
  can be written as a list of comma-separated values(items) between square brackets. Lists might contain items of different
  types, but usually the items all have the same type.
  
  >>> squares = [1,4,9,16,25]
  >>> squares
  [1,4,9,16,25]
  
  unlike Strings, which are immutable, lists ara a mutable type. it is possible to change their content.
  >>>cubes = [1,8,27,65,125]
  
  You can also add new items at the end of the list, by using the append() method
  >>> cubes.append(216)
  
  Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:
  >>> letters = ['a','b','c','d','e','f','g']
  >>> letters
  ['a','b','c','d','e','f','g']
  >>> # replace some values
  >>> letters[2:5] = ['C','D','E']
  >>> letters
  ['a','b','C','D','E','f','g']
  >>> # now remove them
  >>> letters[2:5]=[]
  >>> letters
  ['a','b','f','g']
  >>> # clear the list by replacing all the elements with an empty list
  >>> letters[:]=[]
  >>> letters
  []
  The built-in function len() also applies to lists:
  It is possible to nest lists(create lists containing other lists),for example:
  >>> a=['a','b','c']
  >>> n=[1,2,3]
  >>> x=[a,n]
  >>> x
  [['a','b','c'],[1,2,3]]
  >>>x[0]
  ['a','b','c']
  >>>x[0][1]
  'b'
  
   
   
   
   
   
   
   
