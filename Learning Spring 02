Spring MVC 
================
REST 风格的URL
以CRUD为例

新增:/order POST
修改:/order/1 PUT      update?id=1
获取:/order/1 GET      get?id=1
删除:/order/1 DELETE   delete?id=1

如何发送PUT请求和DELETE请求呢？
1.需要配置HiddenHttpMethodFilter
2.需要发送POST请求
3.需要在发送POST请求时携带一个name="_method" 的隐藏域，值为DELETE或者PUT


Spring MVC @RequestParam()请求参数
=================================


Spring MVC @RequestHeader()请求头注解
====================================



Spring MVC @CookieValue Annotation
==================================
可以使处理方法入参绑定某个Cookie值
了解即可，开发中不常用


Spring MVC
==================================
可以使用原生的Servlet API作为目标方法的参数
具体可以支持以下的类型
HttpServletRequest
HttpServletResponse
HttpSession
java.security.Principal
Locale
InputStream
OutputStream
Reader
Writer

==============
处理模型数据
==============
Spring MVC 会把ModelAndView的Model中数据放入到request 域对象中

目标方法可以添加Map类型（实际上也可以是Model类型或者是ModelMap类型 --- 开发中比较常用

如果开发人员希望在多个请求之间共用某个模型属性数据，则可以在控制器类上标注一个sessionAttribues
SpringMVC将对应的属性存储在HttpSession中

@SessionAttributes 除了可以通过属性名指定需要放到会话中的属性，还可以通过模型属性的
对象类型指定哪些模型属性需要放到会话中 （只能放在类上，不能放在方法上 开发时会用到）


Spring MVC @ModelAttribute注解（重要，但是难以理解）
===============================================
@ModelAttribute --- 源代码分析流程
1.调用@ModelAttribute 注释修饰的方法，实际上把@ModelAttribute方法中Map中的数据放在
  implicitModel中
  
2.解析请求处理器的目标参数，实际上该目标参数来自WebDataBinder对象
  的target属性
  1）创建WebDataBinder对象：
     【a】确定objectName属性：若传入的attrName属性值为“”，则objectName为类名第一个
     字母小写 （注意attrName 若目标方法的POJO属性使用了@ModelAttribute来修饰
     则attrName值即为@ModelAttribute的value属性值
     【b】确定target属性：
      ->在implicitModel中查找attrName对应的属性值，若存在，ok
      ->*若不存在：则验证当前Handler是否使用了@SessionAttributes进行修饰，若使用了，则尝试从
      ->Session中获取attrName所对应的属性值，若Session中若没有对应的属性值，则抛出异常。
      ->若Handler没有使用@SessionAttributes进行修饰，或@SessionAttributes中没有使用value值指定的key
        和attrName相匹配，则通过反射创建了POJO对象
  2）SpringMVC 把表单的请求参数赋给了WebDataBinder的target 对应的属性。
  3）*SpringMVC 会把WebDataBinder的attrName和target给到implicitModel
  4）把WebDataBinder的target作为参数传递给目标方法的入餐
      

SpringMVC 确定目标方法POJO类型入参的过程
====================================
1.确定一个key
  1）若目标方法的POJO类型的参数没有使用@ModelAttribute作为修饰，则key为POJO类名第一个字母小写的
  2）若使用了@ModelAttribute来修饰，则key为@ModelAttribute注解的value属性值
2.在implicitModel中查找key对应的对象，若存在，则作为入参传递
  1）若在@ModelAttribute标记的方法中在Map中保存过，且key和已确定的key一致，则会获取到。
3.若implicitModel中不存在key对应的对象，则检查当前的Handler是否使用@SessionAttribues注解修饰，
  若使用了该注解，且@SessionAttributes注解的value属性值包含了key，则会从HttpSession中来获取Key所对应的
  value值，若存在则直接传入到目标方法的入参中，若不存在则抛出异常。
4.若Handler没有标识@SessionAttributes注解或@SessionAttributes注解的value值中不包含key，则会通过反射来创建
  POJO类型的参数，传入为目标方法的参数
5.SpringMVC 会把key和value保存到implicitModel中，进而会保存到request中
