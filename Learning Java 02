============
JSP基本知识点
============
Tomcat下的目录
$CATALINA_HOME/work -- web应用程序，所生成的Servlet的Java源文件，和class字节码文件
$CATALINA_HOME/webapp -- webapp文件夹下存放着具体的Web应用
$CATALINA_HOME/bin -- Tomcat的启动程序，
$CATALINA_HOME/lib -- 运行Tomcat的jar文件



1.JSP页面中的注释 HTML注释
<!-- html comments --> //客户端可见
<%-- JSP comments --%> //客户端不可见
<%

  Java脚本注释 客户端不可见
  //Single Comments
  /*
    Multiple Comments
  */
%>


JSP脚本（所谓脚本就是Java代码）
============================
<% %> 之间的内容就是用来编写Java代码的位置
例如
<%
  out.println("Welcome to use JSP Application");
%>

在JSP页面中定义变量或者方法
========================
语法：<%! Java  %> 才使用这个方式声明变量和方法

<%!
  String s  = "Tomcat"
  ind add(int x,int y){
    return x + y;
  }
%>

JSP中的表达式
===========
<%=表达式 %> //表达式不以分号结束



JSP页面的生命周期
===============
jspService()方法被调用来处理客户端的请求。如果多个客户端同时请求改JSP文件，则JSP引擎会创建多个线程，开发者需要
考虑多线程带来的同步问题。由于Servlet始终位于内存，所以响应速度快


pageEncoding是JSP页面文件本身的编码
contentType的charset是指服务器发送给客户端的内容编码
contentType更常用


JSP内置对象
===========
JSP内置对象是Web容器创建的一组对象，不使用new关键字，就可以使用的
内置对象。JSP一共有9大内置对象，比较常用的是5大对象
out, request,response,session,application
除此之外，还有4个JSP内置对象
Page pageContext exception config

get/post表单提交方式的区别
=======================
1.get 以明文的方式通过URL提交数据，数据在URL中可以看到，提交的数据最多不能超过2KB。安全性较低但是效率比post方式高。
适合提交数据量不大，安全性不高的数据，比如搜索，查询等。

2.post 将用户提交的信息封装在HTML HEADER内，适合提交数据量大，安全性高的用户信息，比如：注册，
修改，上传等功能

