JUnit4 最佳实践

1. 测试方法上必须使用@Test进行注释
2. 测试方法必须使用public void进行休息，而且不能带任何参数
3. 新建一个源代码目录来保存我们的测试代码
4. 测试类的包应与被测试类的包名字保持一致
5. 测试单元中的每个方法都必须能独立进行测试，任何测试方法之间不能有依赖
6. 测试类使用Test作为类名的后缀 （不是必须的，但是规范）
7. 测试方法使用test作为测试方法名的前缀 （不是必须的，但是规范）

================
测试失败的两种情况
================
1.Failure 一般由单元测试使用的断言方法判断失败所引起的，这就表示测试点发现了问题
  就是说程序的输出的结果和我们预期的不一样。
2.Error 是由代码异常引起的，它可以产生与测试代码本身的错误，也可以是被测试代码中一个
  隐藏的bug
3.测试用例不是用来证明你是对的，而是用来证明你没有错。

=================
JUnit测试的流程
=================
1.@BeforeClass修饰的方法会在所有方法被调用前被执行
  而且该方法是静态的，所以当测试类被加载后会直接运行它
  而且在内存中它只会存在一份实例，比较适合加载配置文件
2.@AfterClass所修饰的方法通常用来对资源的清理，如关闭数据库连接
3.@Before和@After会在每个测试方法的前后各执行一次

4.@Test是将一个普通的方法修饰成为一个测试方法
  @Test(expected=XX.class)
  @Test(timeout=毫秒) 设置执行时间
5.@Ingore所修饰的测试方法会被测试运行器忽略
6.@RunWith是用来更改测试运行器，用户可以自定义测试运行器
   需要继承org.junit.runner.Runner.默认的运行器就能满足测试需要


===================
JUnit测试套件
===================
@RunWith(Suite.class)
@Suite.SuiteClasses({})
1.测试套件就是组织测试类一起运行的
2.写一个作为测试套件的入口类，这个类里不包含任何其他方法
  更改测试运行器Suite.class
  将要测试的类作为数组传入到Suite.SuiteClasses({})
  
=====================
JUnit参数话设置
=====================
1.更改默认的测试运行器为Parameterized.class
2.声明变量来存放预期值和结果值
3.声明一个返回值为Collection的公共静态方法，并使用@Parameters进行修饰
4.为测试类声明一个带有参数的公共构造函数，并在其中为之声明变量赋值
